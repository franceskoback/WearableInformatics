knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(magrittr)
DATA_DIR <- ifelse(Sys.getenv("DATA_DIR") == "", "./misc/data", Sys.getenv("DATA_DIR"))
df <- read.csv(file.path(DATA_DIR, "dicom_metadata_df.csv")) %>%
dplyr::left_join(read.csv(file.path(DATA_DIR, "dicom_proc_stats_df.csv")), by = "X")
plot_title <- function(...) {
title <- do.call(
paste,
lapply(list(...), function(a)
gsub("X\\.([0-9]+)\\.\\.([0-9]+)\\.\\.(.*)", "(\\1, \\2) \\3", a) %>%
gsub("\\.", " ", .)
)
)
stringr::str_to_title(title)
}
create_scatter_plot <- function(dataset, arg_1, arg_2, arg_3) {
dplyr::filter(dataset, .data[[arg_3]] != "") %>%
ggplot(aes(.data[[arg_1]], .data[[arg_2]], color = .data[[arg_3]])) +
geom_point() +
ggtitle(plot_title(arg_1,"by", arg_2)) +
labs(color = plot_title(arg_3)) +
xlab(plot_title(arg_1)) +
ylab(plot_title(arg_2))
}
summary_table <- function(dataset, group_variable) {
dataset %>%
dplyr::filter(.data[[group_variable]] != "") %>%
dplyr::group_by(.data[[group_variable]]) %>%
dplyr::summarise(
N = dplyr::n(),
Raw.mean = mean(Raw.mean),
Rescale.mean = mean(Rescale.mean, na.rm = TRUE),
Win.mean = mean(Win.mean),
VOI.mean = mean(VOI.mean),
) %>%
dplyr::arrange(-N)
}
library(ggplot2)
library(magrittr)
fill_variable <- "X.0008..1090..Manufacturer.s.Model.Name"
df %>% create_scatter_plot("Rescale.mean", "Rescale.variance", fill_variable)
df %>% create_scatter_plot("Raw.mean", "Raw.variance", fill_variable)
df %>% create_scatter_plot("Win.mean", "Win.variance", fill_variable)
df %>% create_scatter_plot("VOI.mean", "VOI.variance", fill_variable)
library(ggplot2)
plot_variable <- function(variable) {
ggplot(dplyr::filter(df, .data[[fill_variable]] != ""), aes(.data[[variable]], fill = .data[[fill_variable]])) +
geom_histogram() +
ggtitle(plot_title(variable)) +
labs(fill = plot_title(fill_variable))
}
plot_variable("Raw.mean")
plot_variable("Raw.variance")
plot_variable("Raw.skewness")
plot_variable("Raw.kurtosis")
library(knitr)
df %>% summary_table(fill_variable) %>% kable(caption = "Manufacturer Model Name")
library(ggplot2)
library(magrittr)
fill_variable <- "X.0008..0070..Manufacturer"
df %>% create_scatter_plot("Rescale.mean", "Rescale.variance", fill_variable)
df %>% create_scatter_plot("Raw.mean", "Raw.variance", fill_variable)
df %>% create_scatter_plot("Win.mean", "Win.variance", fill_variable)
df %>% create_scatter_plot("VOI.mean", "VOI.variance", fill_variable)
library(knitr)
df %>% summary_table(fill_variable) %>% kable(caption = "Manufacturer")
chi <- chisq.test(df$X.0012..0030..Clinical.Trial.Site.ID, df$X.0008..0070..Manufacturer)
chi <- chisq.test(df$X.0012..0030..Clinical.Trial.Site.ID, df$X.0008..0070..Manufacturer)
library(ggplot2)
library(magrittr)
fill_variable <- "X.0012..0030..Clinical.Trial.Site.ID"
df %>% create_scatter_plot("Rescale.mean", "Rescale.variance", fill_variable)
df %>% create_scatter_plot("Raw.mean", "Raw.variance", fill_variable)
df %>% create_scatter_plot("Win.mean", "Win.variance", fill_variable)
df %>% create_scatter_plot("VOI.mean", "VOI.variance", fill_variable)
library(knitr)
df %>% summary_table(fill_variable) %>% kable(caption = "Clinical Trial Site ID")
library(ggplot2)
library(magrittr)
df_combined <- df %>%
dplyr::filter(X.0008..0070..Manufacturer != "", X.0012..0030..Clinical.Trial.Site.ID != "") %>%
dplyr::mutate(
manufacturer_by_site = paste0(X.0008..0070..Manufacturer, "-", X.0012..0030..Clinical.Trial.Site.ID)
)
fill_variable <- "manufacturer_by_site"
df_combined %>% create_scatter_plot("Rescale.mean", "Rescale.variance", fill_variable)
df_combined %>% create_scatter_plot("Raw.mean", "Raw.variance", fill_variable)
df_combined %>% create_scatter_plot("Win.mean", "Win.variance", fill_variable)
df_combined %>% create_scatter_plot("VOI.mean", "VOI.variance", fill_variable)
#And time to plot
ggplot(heart)+
ggtitle("Resting Heart Rate")+
ylab("Daily Average Resting Heart Rate (bpm)")+
xlab("Cycle Phase")+
scale_x_continuous(labels=percent)+
scale_y_continuous()+
z_theme()
# Set up the functions
library(ggplot2)
setwd("~/Documents/research/Wearables/Github")
setwd("./Resting-Heart-Rate")
##### RHR_estimation_model.R
# Example usage of the helper functions defined in RHR_estimation.R and plotting.R
# The original Strong-D data has not been included for participant confidentiality purposes.
##### Input:
# HR data.table with columns: "Id" (id of participant/individual), "Time" (POSIXct) and "Values" (integer heart rate value)
# Steps data.table with columns:  "Id" (id of participant/individual), "ActivityMin" (POSIXct) and "Steps" (integer count of num. steps)
# Note that the steps measurement frequency (ActivityMin; in minutes) is lower than the HR steps measurement frequency (Time; in seconds)
##### Output:
# Data structures and plots containing the estimated RHR and associated parameters and data.
getwd()
source("RHR_estimation.R")
install.packages("data.table")
source("RHR_estimation.R")
install.packages("RcppRoll")
source("RHR_estimation.R")
source("plotting.R")
dt_hr =read.csv"/Users/franceskoback/Documents/research/Wearables/FitbitRestingHeartRates_20230312-20230313.csv"
dt_hr =read.csv("/Users/franceskoback/Documents/research/Wearables/FitbitRestingHeartRates_20230312-20230313.csv")
View(dt_hr)
# setup for join on id and then within each unique id value, join on time
dt_hr[, join_time := Time]
# setup for join on id and then within each unique id value, join on time
dt_hr[, join_time := Date]
colnames(df_hr) <- c("Id","Time","Value")
View(dt_hr)
View(dt_hr)
colnames(df_hr) <- c("Id","Time","Value")
colnames(dt_hr) <- c("Id","Time","Value")
View(dt_hr)
# setup for join on id and then within each unique id value, join on time
dt_hr[, join_time := Time]
is.data.table(DT) == TRUE
is.data.table(dt_hr) == TRUE
setDT(dt_hr)
is.data.table(dt_hr) == TRUE
# setup for join on id and then within each unique id value, join on time
dt_hr[, join_time := Time]
dt_steps_perMin= read.csv("/Users/franceskoback/Documents/research/Wearables/FitbitSteps_MadeUp.csv")
View(dt_steps_perMin)
colnames(dt_steps_perMin) <-c("Id","ActivityMin","Steps")
setDT(dt_steps_perMin)
dt_steps_perMin[, join_time := ActivityMin]
setkey(dt_hr, Id, join_time)
setkey(dt_steps_perMin, Id, join_time)
# limit interpolation to HR measurement that occur at most 1min (60s) after step measurement
join_steps_hr <- dt_hr[dt_steps_perMin, roll = -60]
dt_steps_hr <- join_steps_hr[, .(Id, ActivityMin, Value, Steps)]
# remove step measurements that do not have an interpolated HR value
dt_steps_hr <- dt_steps_hr[!is.na(Value)]
id_list <- dt_steps_hr$Id %>% unique()
setkey(dt_steps_hr, Id, ActivityMin)
# Quick search over sampled participants -----
set.seed(0)
id_sample <- sample(id_list, 3)
# step threshold search over hundreds
window_size_list <- c(1, 5, 10, 30, 60)  # minutes
steps_threshold_list <- c(0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000)  # num. steps
plots_metrics_list <- gridsearch_per_id(id_sample, get_rhr_metrics, window_size_list, steps_threshold_list, save = FALSE)
plots <- plots_metrics_list$plots
png(filename = sprintf("example_output/%s.png", paste(id_sample, collapse="_")), width = 8, height = 6, units = "in", res = 500)
multiplot(plotlist = plots, layout = matrix(1:(length(id_sample)*2), ncol = 2, byrow=TRUE))
dev.off()
# Fine grain search over all participants -----
window_size_list <- seq(1, 120, 1)  # minutes
steps_threshold_list <- seq(0, 1000, 10) # num. steps
plots_metrics_list <- gridsearch_per_id(id_list, get_rhr_metrics, window_size_list, steps_threshold_list, save = FALSE)
View(dt_steps_hr)
# remove step measurements that do not have an interpolated HR value
dt_steps_hr <- dt_steps_hr[!is.na(Value)]
View(dt_steps_hr)
df_hr =read.csv("/Users/franceskoback/Documents/research/Wearables/FitbitRestingHeartRates_20230312-20230313.csv")
colnames(df_hr) <- c("Id","Time","Value")
library(dplyr)
unique(data$Id)
unique(df_hr$Id)
id_list=unique(df_hr$Id)
df_grp_1=id_list[1]
df_grp_region = df %>% group_by(df_grp_1)
df_grped = df %>% group_by(df_grp_1)
df_grped = df_hr %>% group_by(df_grp_1)
df_grped = df_hr %>% group_by(id_list[1])
View(df_grped)
df_grped = df_hr %>% group_by(id)
df_grped = df_hr %>% group_by("Id")
View(df_grped)
View(df_grped)
df_grped = df_hr %>% group_by("Id") %>%
summarise(total_hr = sum(Value),
.groups = 'drop')
df_grped = df_hr %>% group_by("Id") %>%
summarise(total_hr = sum(Value),
.groups = 'drop')
View(df_grped)
df_grped = df_hr %>% group_by(id_list[1]) %>%
summarise(total_hr = sum(Value),
.groups = 'drop')
View(df_grped)
df_grped = df_hr %>% group_by(id_list[1]) %>%
summarise(total_hr = ave(Value),
.groups = 'drop')
View(df_grped)
df_grped = df_hr %>% group_by(id_list[1]) %>%
summarise(total_hr = ave(Value),
.groups = 'drop')
View(df_grped)
df_grped = df_hr %>% group_by(id_list[2]) %>%
summarise(total_hr = ave(Value),
.groups = 'drop')
View(df_grped)
df_grped = df_hr %>% group_by(id_list[1]) %>%
summarise(total_hr = ave(Value),
.groups = 'drop')
View(df_grped)
df_hr =read.csv("/Users/franceskoback/Documents/research/Wearables/FitbitRestingHeartRates_20230312-20230313.csv")
colnames(df_hr) <- c("Id","Time","Value")
id_list=unique(df_hr$Id)
df_grped = df_hr %>% group_by(Id) %>%
summarise(total_hr = ave(Value),
.groups = 'drop')
View(df_grped)
df = read.csv("/Users/franceskoback/Downloads/Sample_Superstore.csv")
df_grp_region = df %>% group_by(Region)  %>%
summarise(total_sales = sum(Sales),
total_profits = sum(Profit),
.groups = 'drop')
View(df_grp_region)
View(df_grp_region)
View(df)
df_grp_region = df %>% group_by(Region)
View(df_grp_region)
df_grp_region = df %>% group_by(Region)   %>%
summarise(total_sales = sum(Sales))
View(df_grp_region)
df_grped = df_hr %>% group_by(Id) %>%
summarise(total_hr = ave(Value),
.groups = 'drop'))
df_grped = df_hr %>% group_by(Id) %>%
summarise(total_hr = ave(Value),
.groups = 'drop')
View(df_grped)
View(df)
View(df_hr)
View(dt_hr)
View(df_hr)
print(sapply(df_hr, class))
print(sapply(df, class))
colnames(df) <- c("Id","Time","Value")
df_grp_region = df %>% group_by(Id)  %>%
summarise(total_sales = sum(Sales),
total_profits = sum(Profit),
.groups = 'drop')
df_grp_region = df %>% group_by(Id)  %>%
summarise(total_sales = sum(Time),
total_profits = sum(Value),
.groups = 'drop')
df_grp_region = df %>% group_by(Id)  %>%
summarise(total_sales = sum(Time),
total_profits = sum(Value),
.groups = 'drop')
View(df)
colnames(df) <- c("Id","Time","Value","4","5","6")
df_grp_region = df %>% group_by(Id)  %>%
summarise(total_sales = sum(Time),
total_profits = sum(Value),
.groups = 'drop')
colnames(df) <- c("Id","Time","Value","4","5","6","7")
df_grp_region = df %>% group_by(Id)  %>%
summarise(total_sales = sum(Time),
total_profits = sum(Value),
.groups = 'drop')
View(df)
df_grp_region = df %>% group_by(Id)  %>%
summarise(total_sales = sum(6),
total_profits = sum(7),
.groups = 'drop')
View(df_grp_region)
View(df)
df = read.csv("/Users/franceskoback/Downloads/Sample_Superstore.csv")
View(df)
colnames(df) <- c("Id","Time","Value","4","5","6","7")
View(df)
df_grp_region = df %>% group_by(Value)  %>%
summarise(total_sales = sum(6),
total_profits = sum(7),
.groups = 'drop')
View(df_grp_region)
df_grp_region = df %>% group_by(Value)  %>%
summarise(total_sales = sum(6),
total_profits = sum(7),
.groups = 'drop')
View(df_grp_region)
nona_df = read.csv("/Users/franceskoback/Downloads/dicom_metadata_no_na.csv")
View(nona_df)
View(nona_df)
id_list=unique(df_hr$X.0008..0070..Manufacturer)
colnames(nona_df)
id_list=unique(nona_df$"X.0008..0070..Manufacturer")
id_list
View(dt_hr)
View(df)
View(df_hr)
# Set up the functions
library(ggplot2)
# Set up the functions
library(ggplot2)
library(scales)
setwd("~/Documents/research/Wearables")
heart <- read.csv("FitbitRestingHeartRates_20230312-20230313.csv", stringsAsFactors=FALSE)
# Set up a common theme for our plot
z_theme <- function() {
theme_bw(base_size=9) +
#Background and Grid formatting
theme(panel.background=element_rect(fill="#F0F0F0", color="#F0F0F0")) +
theme(plot.background=element_rect(fill="#F0F0F0", color="#F0F0F0")) +
theme(panel.border=element_rect(color="#F0F0F0")) +
theme(panel.grid.major=element_line(color="#969696",size=.25)) +
theme(panel.grid.minor=element_blank()) +
#Legend formatting
theme(legend.background = element_rect(fill="#F0F0F0")) +
theme(legend.text = element_text(size=14,color="#525252")) +
theme(legend.title= element_blank())+
#Axis & Title Formatting
theme(plot.title=element_text(color="#525252", size=20, vjust=1.25)) +
theme(axis.ticks=element_blank()) +
theme(axis.text.x=element_text(size=14,color="#737373")) +
theme(axis.text.y=element_text(size=14,color="#737373")) +
theme(axis.title.x=element_text(size=16,color="#737373", vjust=0)) +
theme(axis.title.y=element_text(size=16,color="#737373", vjust=.5))
}
#And time to plot
ggplot(heart)+
ggtitle("Resting Heart Rate vs. Period/Ovulation")+
ylab("Daily Average Resting Heart Rate (bpm)")+
xlab("Cycle Phase")+
scale_x_continuous(labels=percent)+
scale_y_continuous()+
z_theme()
df_hr =read.csv("/Users/franceskoback/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/RK.E0CC9B64.Wearable Wellness_20230325-20230326/FitbitRestingHeartRates_20230325-20230326.csv")
library(dplyr)
df = read.csv("/Users/franceskoback/Downloads/Sample_Superstore.csv")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Github/Resting-Heart-Rate/example.R", echo=TRUE)
install.packages("data.table")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Github/Resting-Heart-Rate/example.R", echo=TRUE)
install.packages("RcppRoll")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Github/Resting-Heart-Rate/example.R", echo=TRUE)
source("RHR_estimation.R")
# Load Data ----
# e.g.:
# load("cleaning/RData_clean/dt_steps.RData")
# load("cleaning/RData_clean/dt_hr_filtered.RData")
df_hr= read.csv("/Users/franceskoback/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/3-26-RK.E0CC9B64.Wearable Wellness_20230325-20230326/HeartRates.csv")
dt_hr=setDT(df_hr)
df_steps_perMin= read.csv("/Users/franceskoback/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/3-26-RK.E0CC9B64.Wearable Wellness_20230325-20230326/Steps.csv")
dt_steps_perMin= setDT(df_steps_perMin)
# setup for join on id and then within each unique id value, join on time
# dt_hr[, join_time := Time]
# dt_steps_perMin[, join_time := ActivityMin]
# setkey(dt_hr, Id, join_time)
# setkey(dt_steps_perMin, Id, join_time)
dt_hr[, join_time := Time]
dt_steps_perMin[, join_time := ActivityMin]
setkey(dt_hr, Id, join_time)
setkey(dt_steps_perMin, Id, join_time)
# limit interpolation to HR measurement that occur at most 1min (60s) after step measurement
join_steps_hr <- dt_hr[dt_steps_perMin, roll = -60]
dt_steps_hr <- join_steps_hr[, .(Id, ActivityMin, Value, Steps)]
# remove step measurements that do not have an interpolated HR value
dt_steps_hr <- dt_steps_hr[!is.na(Value)]
id_list <- dt_steps_hr$Id %>% unique()
setkey(dt_steps_hr, Id, ActivityMin)
# Quick search over sampled participants -----
set.seed(0)
id_sample <- sample(id_list, 2)
# step threshold search over hundreds
window_size_list <- c(1, 5, 10, 30, 60)  # minutes
steps_threshold_list <- c(0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000)  # num. steps
plots_metrics_list <- gridsearch_per_id(id_sample, get_rhr_metrics, window_size_list, steps_threshold_list, save = FALSE)
plots <- plots_metrics_list$plots
png(filename = sprintf("example_output/%s.png", paste(id_sample, collapse="_")), width = 8, height = 6, units = "in", res = 500)
multiplot(plotlist = plots, layout = matrix(1:(length(id_sample)*2), ncol = 2, byrow=TRUE))
dev.off()
# Fine grain search over all participants -----
window_size_list <- seq(1, 120, 1)  # minutes
steps_threshold_list <- seq(0, 1000, 10) # num. steps
plots_metrics_list <- gridsearch_per_id(id_list, get_rhr_metrics, window_size_list, steps_threshold_list, save = FALSE)
plots_metrics_list <- gridsearch_per_id(id_list, get_rhr_metrics, window_size_list, steps_threshold_list, save = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(ggplot2)
# Read the aggregate CSV file
data <- read.csv("aggregate.csv")
View(data)
# Load required libraries
library(ggplot2)
# Read the aggregate CSV file
data <- read.csv("aggregate1.csv")
View(data)
# Convert the Date column to a date format
data$Date <- as.Date(data$Date)
# Iterate over unique ParticipantIdentifier values
participants <- unique(data$ParticipantIdentifier)
# Function to plot data for each participant
plotParticipantData <- function(participant) {
# Subset data for the current participant
participant_data <- subset(data, ParticipantIdentifier == participant)
# Create the plot
plot <- ggplot(participant_data, aes(x = Date)) +
geom_line(aes(y = RestingHeartRate, color = "Resting Heart Rate")) +
geom_line(aes(y = Sleep, color = "Sleep Duration")) +
geom_line(aes(y = Steps, color = "Steps")) +
labs(title = paste("Participant", participant), x = "Date", y = "Value") +
scale_color_manual(values = c("Resting Heart Rate" = "blue", "Sleep Duration" = "red", "Steps" = "green")) +
theme_minimal()
# Display the plot
print(plot)
}
# Generate and display the plots for each participant
for (participant in participants) {
plotParticipantData(participant)
}
View(data)
View(data)
View(data)
participants
participant_data <- subset(data, ParticipantIdentifier == participant)
View(participant_data)
plot <- ggplot(participant_data, aes(x = Date)) +
geom_line(aes(y = RestingHeartRate, color = "Resting Heart Rate")) +
geom_line(aes(y = Sleep, color = "Sleep Duration")) +
geom_line(aes(y = Steps, color = "Steps")) +
labs(title = paste("Participant", participant), x = "Date", y = "Value") +
scale_color_manual(values = c("Resting Heart Rate" = "blue", "Sleep Duration" = "red", "Steps" = "green")) +
theme_minimal()
# Display the plot
print(plot)
View(participant_data)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
View(participant_data)
participant_data <- subset(data, ParticipantIdentifier == participant)
View(participant_data)
View(data)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
View(data)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Convert the Date column to a date format
data$Date <- as.Date(data$Date)
# Iterate over unique ParticipantIdentifier values
participants <- unique(data$ParticipantIdentifier)
# Function to plot data for each participant
plotParticipantData <- function(participant) {
# Subset data for the current participant
participant_data <- subset(data, ParticipantIdentifier == participant)
# Create the plot
plot <- ggplot(participant_data, aes(x = Date)) +
geom_line(aes(y = RestingHeartRate, color = "Resting Heart Rate")) +
geom_line(aes(y = Sleep, color = "Sleep Duration")) +
geom_line(aes(y = Steps, color = "Steps")) +
labs(title = paste("Participant", participant), x = "Date", y = "Value") +
scale_color_manual(values = c("Resting Heart Rate" = "blue", "Sleep Duration" = "red", "Steps" = "green")) +
theme_minimal()
# Display the plot
print(plot)
}
# Generate and display the plots for each participant
for (participant in participants) {
plotParticipantData(participant)
}
# Load required libraries
library(ggplot2)
# Read the aggregate CSV file
data <- read.csv("aggregate1.csv")
# Convert the Date column to a date format
data$Date <- as.Date(data$Date)
# Iterate over unique ParticipantIdentifier values
participants <- unique(data$ParticipantIdentifier)
# Function to plot data for each participant
plotParticipantData <- function(participant) {
# Subset data for the current participant
participant_data <- subset(data, ParticipantIdentifier == participant)
# Create the plot
plot <- ggplot(participant_data, aes(x = Date)) +
geom_line(aes(y = RestingHeartRate, color = "Resting Heart Rate")) +
geom_line(aes(y = Sleep, color = "Sleep Duration")) +
geom_line(aes(y = Steps, color = "Steps")) +
labs(title = paste("Participant", participant), x = "Date", y = "Value") +
scale_color_manual(values = c("Resting Heart Rate" = "blue", "Sleep Duration" = "red", "Steps" = "green")) +
theme_minimal()
# Display the plot
print(plot)
}
# Generate and display the plots for each participant
for (participant in participants) {
plotParticipantData(participant)
}
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Research/Wearables/Plotting1.R", echo=TRUE)
